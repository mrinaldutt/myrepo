What are different ways of iterating collection list in Java 8?
Ans:
List<String> notes = new ArrayList<>();
	notes.add("note1");
	notes.add("note2");
	notes.add("note3");
	notes.add("note4");
	notes.add("note5");

	//Using lambda expression
	//Output : note1,note2,note3,note4,note5
	notes.forEach(note->System.out.println(note));

	//Output : note3
	notes.forEach(note->{
		if("note3".equals(note)){
			System.out.println(note);
		}
	});

	//Using Stream and filter
	//Output : note2
	notes.stream()
		.filter(s->s.contains("note2"))
		.forEach(System.out::println);

	//Using method reference
	//Output : note1,note2,note3,note4,note5
	notes.forEach(System.out::println);
  -----------------------------------------------------------
  How to check if list is empty in Java 8 using Optional, if not null iterate through the list and print the object?
Ans:

Optional.ofNullable(noteLst)
            .orElseGet(Collections::emptyList) // creates empty immutable list: [] in case noteLst is null
            .stream().filter(Objects::nonNull) //loop throgh each object and consider non null objects
            .map(note -> Notes::getTagName) // method reference, consider only tag name
            .forEach(System.out::println); // it will print tag names
-------------------------------------------------------------------
How to sort Collection in Java 8?
//Older way to sort, before java 8
		noteLst.sort(new Comparator<Notes>() {
		@Override
		public int compare(Notes n1, Notes n2) {
			return n1.getId()-n2.getId();
		}
	});	
public class TestNotes {

    public static void main(String[] args) {

        List<Notes> noteLst = new ArrayList<>();
        noteLst.add(new Notes(1, "aa", 11));
        noteLst.add(new Notes(3, "cc", 33));
        noteLst.add(new Notes(4, "bb", 44));
		noteLst.add(new Notes(2, "dd", 34));
        noteLst.add(new Notes(5, "zz", 32));

		// java 8 sort according to id 1,2,3,4,5
        noteLst.sort((n1, n2)->n1.getId()-n2.getId());

		//java 8 print the notes using lamda
		noteLst.forEach((note)->System.out.println(note));
    }
}
//Output 

Notes [id=1, tagName=aa, tagId=11]
Notes [id=2, tagName=dd, tagId=34]
Notes [id=3, tagName=cc, tagId=33]
Notes [id=4, tagName=bb, tagId=44]
Notes [id=5, tagName=zz, tagId=32]
---------------------------------------
How to use map to convert object into Uppercase in Java 8?
Ans:
//Older way to convert object to uppercase
		List<String> names = Arrays.asList("aa", "bb", "cc", "dd");

        List<String> uppercaseNames = new ArrayList<>();
        for (String name : names) {
            uppercaseNames.add(name.toUpperCase());
        }
       // In Java 8
        List<String> nameLst = names.stream().map(String::toUpperCase).collect(Collectors.toList());
        System.out.println(nameLst); //output- [AA, BB, CC, DD]

-------------------------------------------------------------------------------------

package java8;

import java.util.Comparator;
import java.util.List;
import java.util.function.BinaryOperator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class JavaFunctionalInterfaceTest {
	
	private static int sum(int x, int y) {
		return x+y;
	}

	public static void testFunction() {
		
		List<Integer> list = Stream.of(1,2,3,4,5,6,7,8,8,9).collect(Collectors.toList());
		
		Predicate<Integer> isPredicate = x->x%2==0;
		Predicate<Integer> isPredicate2 = new Predicate<Integer>() {
			@Override
			public boolean test(Integer t) {
				return t%2==0;
			}
		};
		
		Function<Integer, Integer> squareFunc = new Function<Integer, Integer>() {
			@Override
			public Integer apply(Integer x) {
				return x*x;
			}
		};
		
		Consumer<Integer> systemConsume = new Consumer<Integer>() {
			@Override
			public void accept(Integer elem) {
				System.out.println(elem);
			}
		};
		
		//list.stream().filter(x->x%2==0).map(x->x*x).forEach(System.out::println);
		list.stream().filter(isPredicate2).map(squareFunc).forEach(systemConsume);
		
		BinaryOperator<Integer> binaryOperator = Integer::sum;
		BinaryOperator<Integer> sumBinaryOperator = new BinaryOperator<Integer>() {
			@Override
			public Integer apply(Integer x, Integer y) {
				return x+y;
			}};
		//System.out.println("sum of al numbers "+list.stream().reduce(0, Integer::sum));
		System.out.println("Sum of all number "+list.stream().reduce(0, sumBinaryOperator));
		
	}
	
	public static void main(String args[]) {
		testFunction();
		
		List<Integer> list = Stream.of(1,2,3,4,5,6,7,8,9,8).collect(Collectors.toList());
		
		System.out.println("Printing all numbers");
		list.stream().forEach(System.out::println);
		
		System.out.println("Printing odd numbers");
		list.stream().filter(x->x%2!=0).forEach(System.out::println);
		
		System.out.println("Printing squared even numbers");
		list.stream().filter(x->x%2==0).map(x->x*x).forEach(System.out::println);
		
		System.out.println("Printing sum of numbers");
		System.out.println(list.stream().reduce(0,JavaFunctionalInterfaceTest::sum));
		System.out.println(list.stream().reduce(0, Integer::sum));
		
		System.out.println("Printing sum all numbers using lambda");
		System.out.println(list.stream().reduce(0,(x,y)->x+y));
		
		System.out.println("Printing last number");
		System.out.println(list.stream().reduce(0,(x,y)->y));
		
		System.out.println("Printing max number");
		System.out.println(list.stream().reduce(0,(x,y)->x>y?x:y));
		
		System.out.println("Printing sum of square root of numbers");
		System.out.println(list.stream().map(x->x*x).reduce(0,(x,y)->x+y));
		System.out.println(list.stream().map(x->x*x).reduce(0, Integer::sum));
		
		System.out.println("Printing all distinct numbers");
		list.stream().distinct().forEach(System.out::println);
		
		System.out.println("Printing all sorted numbers");
		list.stream().sorted().forEach(System.out::println);
		
		System.out.println("Printng all numbers in reverse order");
		list.stream().sorted(Comparator.reverseOrder()).forEach(System.out::println);
		
		
	}
	
}
	
